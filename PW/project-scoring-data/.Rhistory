lines(dnorm(x),from=-5,to=5,ylim=c(0,0.6))
lines(dnorm(seq(-5,5,0.05))
)
hist(x.accepted, breaks = seq(-5,5,0.05), freq = FALSE, main = 'Histogram X zaakceptowanych',
xlab = 'X')
lines(dnorm(seq(-5,5,0.05))
)
plot(dnorm(seq(-5,5,0.05)))
lines(dnorm(seq(-5,5,0.05)))
hist(x.accepted, breaks = seq(-5,5,0.05), freq = FALSE, main = 'Histogram X zaakceptowanych',
xlab = 'X')
lines(dnorm(seq(-5,5,0.05)), col = 2)
plot(dnorm(seq(-5,5,0.05)), col = 2)
seq(-5,5,0.05)
?dnorm
plot(function(x) dnorm(x, log = TRUE), -60, 50,
main = "log { Normal density }")
plot(function(x) dnorm(x), -5, 5)
lines(function(x) dnorm(x), -5, 5)
lines(dnorm(c(0,1,2)), col = 2)
hist(x.accepted, breaks = seq(-5,5,0.05), freq = FALSE, main = 'Histogram X zaakceptowanych',
xlab = 'X')
lines(dnorm(c(0,1,2)), col = 2)
hist(x.accepted, breaks = seq(-5,5,0.05), freq = FALSE, main = 'Histogram X zaakceptowanych',
xlab = 'X')
lines(dnorm(seq(from = -10, to = 10, by = 0.01)), col = 2)
seq(from = -10, to = 10, by = 0.01)
hist(x.accepted, breaks = seq(-5,5,0.05), freq = FALSE, main = 'Histogram X zaakceptowanych',
xlab = 'X')
lines(dnorm(seq(from = -10, to = 10, by = 0.1)), col = 2)
-400:400
lines(dnorm((-500:500/100)), col = 2)
hist(x.accepted, breaks = seq(-5,5,0.05), freq = FALSE, main = 'Histogram X zaakceptowanych',
xlab = 'X')
lines(dnorm((-500:500/100)), col = 2)
(-500:500/100)
hist(x.accepted, breaks = seq(-5,5,0.05), freq = FALSE, main = 'Histogram X zaakceptowanych',
xlab = 'X')
lines(x, dbeta(x,6,3))
hist(x.accepted, breaks = seq(-5,5,0.05), freq = FALSE, main = 'Histogram X zaakceptowanych',
xlab = 'X')
lines(x.accepted, dbeta(x.accepted,6,3))
h <- hist(x.accepted, breaks = seq(-5,5,0.05), freq = FALSE, main = 'Histogram X zaakceptowanych',
xlab = 'X')
xfit<-seq(min(x.accepted),max(x.accepted),length=40)
yfit<-dnorm(xfit)
yfit <- yfit*diff(h$mids[1:2])*length(x.accepted)
lines(xfit, yfit, col="black", lwd=2)
h <- hist(x.accepted, breaks = seq(-5,5,0.05), freq = FALSE, main = 'Histogram X zaakceptowanych',
xlab = 'X')
xfit<-seq(min(x.accepted),max(x.accepted),length=40)
yfit<-dnorm(xfit)
lines(xfit, yfit, col="black", lwd=2)
h <- hist(x.accepted, breaks = seq(-5,5,0.05), freq = FALSE, main = 'Histogram X zaakceptowanych',
xlab = 'X')
xfit<-seq(min(x.accepted),max(x.accepted),length=40)
yfit<-dnorm(xfit)
lines(xfit, yfit, col="black")
h <- hist(x.accepted, breaks = seq(-5,5,0.05), freq = FALSE, main = 'Histogram X zaakceptowanych',
xlab = 'X')
xfit<-seq(min(x.accepted),max(x.accepted),length=40)
yfit<-dnorm(xfit)
lines(xfit, yfit, col="red", lwd=2)
h <- hist(x.accepted, breaks = seq(-5,5,0.05), freq = FALSE, main = 'Histogram X zaakceptowanych',
xlab = 'X')
xfit<-seq(min(x.accepted),max(x.accepted),length=40)
yfit<-dnorm(xfit)
lines(xfit, yfit, col="black", lwd=2)
h.main <- paste0('Histogram X zaakceptowanych',
'\nwraz z rzeczywista gestoscia N(0,1)')
h <- hist(x.accepted, breaks = seq(min(x.accepted),max(x.accepted),0.05),
freq = FALSE, main = h.main, xlab='X')
xfit<-seq(min(x.accepted),max(x.accepted),length=40)
yfit<-dnorm(xfit)
lines(xfit, yfit, col="black", lwd=2)
h.main <- paste0('Histogram X zaakceptowanych',
'\nwraz z rzeczywista gestoscia N(0,1)')
h <- hist(x.accepted, breaks = seq(min(x.accepted)-1,max(x.accepted)+1,0.05),
freq = FALSE, main = h.main, xlab='X')
xfit<-seq(min(x.accepted),max(x.accepted),length=40)
yfit<-dnorm(xfit)
lines(xfit, yfit, col="black", lwd=2)
M <- 1.32
n <- 10000
while(length(x.accepted)<n){
# Symulujemy zmienną z rozkładu normalnego
R <- rdoublex(1)
U <- runif(1)
# Sprawdzamy, czy odrzucamy, czy przyjmujemy
rejected <- (M*U*ddoublex(R) > dnorm(R))
if(rejected){
x.rejected <- c(x.rejected, R)
} else{
x.accepted <- c(x.accepted, R)
}
}
h.main <- paste0('Histogram X zaakceptowanych',
'\nwraz z rzeczywista gestoscia N(0,1)')
h <- hist(x.accepted, breaks = seq(min(x.accepted)-1,max(x.accepted)+1,0.05),
freq = FALSE, main = h.main, xlab='X')
xfit<-seq(min(x.accepted),max(x.accepted),length=40)
yfit<-dnorm(xfit)
lines(xfit, yfit, col="black", lwd=2)
M <- 1.32
n <- 1000
while(length(x.accepted)<n){
# Symulujemy zmienną z rozkładu normalnego
R <- rdoublex(1)
U <- runif(1)
# Sprawdzamy, czy odrzucamy, czy przyjmujemy
rejected <- (M*U*ddoublex(R) > dnorm(R))
if(rejected){
x.rejected <- c(x.rejected, R)
} else{
x.accepted <- c(x.accepted, R)
}
}
h.main <- paste0('Histogram X zaakceptowanych',
'\nwraz z rzeczywista gestoscia N(0,1)')
h <- hist(x.accepted, breaks = seq(min(x.accepted)-1,max(x.accepted)+1,0.05),
freq = FALSE, main = h.main, xlab='X')
xfit<-seq(min(x.accepted),max(x.accepted),length=40)
yfit<-dnorm(xfit)
lines(xfit, yfit, col="black", lwd=2)
# Dopóki nie wysymulujemy próby długości n
M <- 1.32
n <- 1000
while(length(x.accepted)<n){
# Symulujemy zmienną z rozkładu normalnego
R <- rdoublex(1)
U <- runif(1)
# Sprawdzamy, czy odrzucamy, czy przyjmujemy
rejected <- (M*U*ddoublex(R) > dnorm(R))
if(rejected){
x.rejected <- c(x.rejected, R)
} else{
x.accepted <- c(x.accepted, R)
}
}
h.main <- paste0('Histogram X zaakceptowanych',
'\nwraz z rzeczywista gestoscia N(0,1)')
h <- hist(x.accepted, breaks = seq(min(x.accepted)-1,max(x.accepted)+1,0.05),
freq = FALSE, main = h.main, xlab='X')
xfit<-seq(min(x.accepted),max(x.accepted),length=40)
yfit<-dnorm(xfit)
lines(xfit, yfit, col="black", lwd=2)
library(ggplot2)
x.sample <- c(x.accepted, x.rejected)
x.label <- c(rep("accepted", length(x.accepted)),
rep("rejected", length(x.rejected)))
x.label <- as.factor(x.label)
T = data.frame(sample.x, x.label)
print(qplot(sample.x, data = T, geom = 'density', color = x.label))
x.sample
library(ggplot2)
x.sample <- c(x.accepted, x.rejected)
x.label <- c(rep("accepted", length(x.accepted)),
rep("rejected", length(x.rejected)))
x.label <- as.factor(x.label)
df.tmp = data.frame(sample.x, x.label)
print(qplot(sample.x, data = df.tmp, geom = 'density', color = x.label))
df.tmp
data.frame(sample.x, x.label)
x.sample <- c(x.accepted, x.rejected)
x.label <- c(rep("accepted", length(x.accepted)),
rep("rejected", length(x.rejected)))
x.label <- as.factor(x.label)
df.tmp = data.frame(x.sample, x.label)
print(qplot(x.sample, data = df.tmp, geom = 'density', color = x.label))
print(qplot(sample.x, data = T, geom = 'histogram', fill = accept, binwidth=0.01))
print(qplot(x.sample, data = df.tmp, geom = 'histogram', fill = x.label, binwidth=0.01))
table(x.label)
h.main <- paste0('Histogram X zaakceptowanych',
'\nwraz z rzeczywista gestoscia N(0,1)')
h <- hist(x.accepted, breaks = seq(min(x.accepted)-1,max(x.accepted)+1,0.05),
freq = FALSE, main = h.main, xlab='X')
xfit <- seq(min(x.accepted), max(x.accepted), length=40)
yfit <- dnorm(xfit)
lines(xfit, yfit, col="black", lwd=2)
h.main <- paste0('Histogram X zaakceptowanych',
'\nwraz z rzeczywista gestoscia N(0,1)')
h <- hist(x.accepted, breaks = seq(min(x.accepted)-1,max(x.accepted)+1,0.05),
freq = FALSE, main = h.main, xlab='X')
xfit <- seq(min(x.accepted), max(x.accepted), length=40)
yfit <- dnorm(xfit)
lines(xfit, yfit, col="black", lwd=
2)
library(smoothmest)
par(mfrow=c(1,1))
set.seed(1)
# Wektory przechowujące wartości x zaakceptowane i x odrzucone
x.accepted <- c()
x.rejected <- c()
# Dopóki nie wysymulujemy próby długości n
M <- 1.32
n <- 1000
while(length(x.accepted)<n){
# Symulujemy zmienną z rozkładu normalnego
R <- rdoublex(1)
U <- runif(1)
# Sprawdzamy, czy odrzucamy, czy przyjmujemy
rejected <- (M*U*ddoublex(R) > dnorm(R))
if(rejected){
x.rejected <- c(x.rejected, R)
} else{
x.accepted <- c(x.accepted, R)
}
}
# Sprawdźmy histogram wygenerowanych wartości (o których chcieliśmy, żeby
# były z rozkładu N(0,1) wraz z rzeczywistym rozkładem N(0,1)
h.main <- paste0('Histogram X zaakceptowanych',
'\nwraz z rzeczywista gestoscia N(0,1)')
h <- hist(x.accepted, breaks = seq(min(x.accepted)-1,max(x.accepted)+1,0.05),
freq = FALSE, main = h.main, xlab='X')
xfit <- seq(min(x.accepted), max(x.accepted), length=40)
yfit <- dnorm(xfit)
lines(xfit, yfit, col="black", lwd=2)
library(smoothmest)
par(mfrow=c(1,1))
set.seed(2)
# Wektory przechowujące wartości x zaakceptowane i x odrzucone
x.accepted <- c()
x.rejected <- c()
# Dopóki nie wysymulujemy próby długości n
M <- 1.32
n <- 1000
while(length(x.accepted)<n){
# Symulujemy zmienną z rozkładu normalnego
R <- rdoublex(1)
U <- runif(1)
# Sprawdzamy, czy odrzucamy, czy przyjmujemy
rejected <- (M*U*ddoublex(R) > dnorm(R))
if(rejected){
x.rejected <- c(x.rejected, R)
} else{
x.accepted <- c(x.accepted, R)
}
}
# Sprawdźmy histogram wygenerowanych wartości (o których chcieliśmy, żeby
# były z rozkładu N(0,1) wraz z rzeczywistym rozkładem N(0,1)
h.main <- paste0('Histogram X zaakceptowanych',
'\nwraz z rzeczywista gestoscia N(0,1)')
h <- hist(x.accepted, breaks = seq(min(x.accepted)-1,max(x.accepted)+1,0.05),
freq = FALSE, main = h.main, xlab='X')
xfit <- seq(min(x.accepted), max(x.accepted), length=40)
yfit <- dnorm(xfit)
lines(xfit, yfit, col="black", lwd=2)
library(ggplot2)
x.sample <- c(x.accepted, x.rejected)
x.label <- c(rep("accepted", length(x.accepted)),
rep("rejected", length(x.rejected)))
x.label <- as.factor(x.label)
df.tmp = data.frame(x.sample, x.label)
print(qplot(x.sample, data = df.tmp, geom = 'density', color = x.label))
print(qplot(x.sample, data = df.tmp, geom = 'histogram', fill = x.label, binwidth=0.01))
table(x.label)
length(x.accepted)/(length(x.accepted) + length(x.rejected))
ks.test(x.accepted, "pnorm", 0, 1)
alpha.real <- 3/2
alpha.real <- 3/2
alpha.whole <- floor(alpha.real)
alpha.whole
alpha.int <- floor(alpha.real)
b <- alpha.int/alpha.real
b
?rgamma
set.seed(2)
# Wektory przechowujące wartości x zaakceptowane i x odrzucone
x.accepted <- c()
x.rejected <- c()
# Dopóki nie wysymulujemy próby długości n
M <- 1.257
n <- 1000
alpha.real <- 3/2
alpha.int <- floor(alpha.real)
b_alpha <- alpha.int/alpha.real
while(length(x.accepted)<n){
# Symulujemy zmienną z rozkładu normalnego
R <- rdoublex(1, a=alpha.int, s=(1/b_alpha))
U <- runif(1)
# Sprawdzamy, czy odrzucamy, czy przyjmujemy
rejected <- (M*U*dgamma(R, a=alpha.int, s=(1/b_alpha)) > dgamma(R, a=alpha.real, s=1))
if(rejected){
x.rejected <- c(x.rejected, R)
} else{
x.accepted <- c(x.accepted, R)
}
}
set.seed(2)
# Wektory przechowujące wartości x zaakceptowane i x odrzucone
x.accepted <- c()
x.rejected <- c()
# Dopóki nie wysymulujemy próby długości n
M <- 1.257
n <- 1000
alpha.real <- 3/2
alpha.int <- floor(alpha.real)
b_alpha <- alpha.int/alpha.real
while(length(x.accepted)<n){
# Symulujemy zmienną z rozkładu normalnego
R <- rgamma(1, a=alpha.int, s=(1/b_alpha))
U <- runif(1)
# Sprawdzamy, czy odrzucamy, czy przyjmujemy
rejected <- (M*U*dgamma(R, a=alpha.int, s=(1/b_alpha)) > dgamma(R, a=alpha.real, s=1))
if(rejected){
x.rejected <- c(x.rejected, R)
} else{
x.accepted <- c(x.accepted, R)
}
}
set.seed(2)
# Wektory przechowujące wartości x zaakceptowane i x odrzucone
x.accepted <- c()
x.rejected <- c()
# Dopóki nie wysymulujemy próby długości n
M <- 1.257
n <- 1000
alpha.real <- 3/2
alpha.int <- floor(alpha.real)
b_alpha <- alpha.int/alpha.real
while(length(x.accepted)<n){
# Symulujemy zmienną z rozkładu normalnego
R <- rgamma(1, shape=alpha.int, scale=(1/b_alpha))
U <- runif(1)
# Sprawdzamy, czy odrzucamy, czy przyjmujemy
rejected <- (M*U*dgamma(R, shape=alpha.int, scale=(1/b_alpha)) > dgamma(R, shape=alpha.real, scale=1))
if(rejected){
x.rejected <- c(x.rejected, R)
} else{
x.accepted <- c(x.accepted, R)
}
}
h.main <- paste0('Histogram X zaakceptowanych',
'\nwraz z rzeczywista gestoscia G(3/2,1)')
h <- hist(x.accepted, breaks = seq(min(x.accepted)-1,max(x.accepted)+1,0.05),
freq = FALSE, main = h.main, xlab='X')
xfit <- seq(min(x.accepted), max(x.accepted), length=40)
yfit <- dgamma(xfit, shape=alpha.real, scale=1)
lines(xfit, yfit, col="black", lwd=2)
# Histogram wygenerowanych wartości (o których chcieliśmy, żeby
# były z rozkładu N(0,1) wraz z rzeczywistym rozkładem G(3/2,1)
h.main <- paste0('Histogram X zaakceptowanych',
'\nwraz z rzeczywista gestoscia Ga(3/2,1)')
h <- hist(x.accepted, breaks = seq(min(x.accepted)-1,max(x.accepted)+1,0.05),
freq = FALSE, main = h.main, xlab='X')
xfit <- seq(min(x.accepted), max(x.accepted), length=40)
yfit <- dgamma(xfit, shape=alpha.real, scale=1)
lines(xfit, yfit, col="black", lwd=2)
x.sample <- c(x.accepted, x.rejected)
x.label <- c(rep("accepted", length(x.accepted)),
rep("rejected", length(x.rejected)))
x.label <- as.factor(x.label)
df.tmp = data.frame(x.sample, x.label)
print(qplot(x.sample, data = df.tmp, geom = 'density', color =s x.label))
x.sample <- c(x.accepted, x.rejected)
x.label <- c(rep("accepted", length(x.accepted)),
rep("rejected", length(x.rejected)))
x.label <- as.factor(x.label)
df.tmp = data.frame(x.sample, x.label)
print(qplot(x.sample, data = df.tmp, geom = 'density', color =x.label))
library(ggplot2)
x.sample <- c(x.accepted, x.rejected)
x.label <- c(rep("accepted", length(x.accepted)),
rep("rejected", length(x.rejected)))
x.label <- as.factor(x.label)
df.tmp = data.frame(x.sample, x.label)
print(qplot(x.sample, data = df.tmp, geom = 'density', color =x.label))
print(qplot(x.sample, data = df.tmp, geom = 'histogram', fill = x.label, binwidth=0.01))
table(x.label)
length(x.accepted)/(length(x.accepted) + length(x.rejected))
ks.test(x.accepted, "pgamma", shape=alpha.real, scale=1)
install.packages("rJava")
if (Sys.getenv("JAVA_HOME")!="")
Sys.setenv(JAVA_HOME="")
install.packages("rJava")
Sys.getenv("JAVA_HOME")
R CMD javareconf
Sys.setenv(JAVA_HOME="/usr/lib/jvm/java-7-openjdk-amd64/jre")
install.packages("rJava")
library(rJava)
Sys.setenv(JAVA_HOME="/usr/lib/jvm/java-7-openjdk-amd64/jre")
#install.packages("rJava")
library(rJava)
Sys.setenv(JAVA_HOME="")
library(rJava)
load("/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/rJava/libs/rJava.so")
library(devtools)
load_all('/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/rJava')
Sys.setenv(JAVA_HOME="/usr/lib/jvm/java-7-openjdk-amd64/jre")
load_all('/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/rJava')
library(rJava)
install.packages("rxml")
install.packages("XML")
library(XML)
library(XML)
install.packages("RSelector")
install.packages("FSelector")
load_all('/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/rJava')
if (computer.name == "marta-komputer")
Sys.setenv(JAVA_HOME="/usr/lib/jvm/java-7-openjdk-amd64/jre")
library(devtools)
load_all('/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/rJava')
install.packages("FSelector")
computer.name <- Sys.info()["nodename"]
if (Sys.info()["nodename"] == "marta-komputer")
Sys.setenv(JAVA_HOME="/usr/lib/jvm/java-7-openjdk-amd64/jre")
library(devtools)
load_all('/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/rJava')
install.packages("FSelector")
library(FSelector)
load_all('/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/rJava')
if (Sys.info()["nodename"] == "marta-komputer")
Sys.setenv(JAVA_HOME="/usr/lib/jvm/java-7-openjdk-amd64/jre")
library(devtools)
load_all('/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/rJava')
#install.packages("FSelector")
library(FSelector)
if (Sys.info()["nodename"] == "marta-komputer")
Sys.setenv(JAVA_HOME="/usr/lib/jvm/java-7-openjdk-amd64/jre")
library(devtools)
load_all('/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/rJava')
load_all('/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/FSelector')
install.packages("RWeka")
load_all('/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/rJava')
load_all('/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/FSelector')
library(rWeka)
library(RWeka)
library(rJava)
library(RWeka)
library(rJava)
load_all('/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/FSelector')
library(FSelector)
install.packages("RMySQL")
library(Causata)
install.packages("Causata")
library(Causata)
library(FSelector)
if (Sys.info()["nodename"] == "marta-komputer"){
Sys.setenv(JAVA_HOME="/usr/lib/jvm/java-7-openjdk-amd64/jre")
library(devtools)
load_all('/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/rJava')
library(rJava)
load_all('/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/RWekajars')
library(RWekajars)
load_all('/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/RWeka')
library(RWeka)
load_all('/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/FSelector')
library(FSelector)
}
Sys.setenv(JAVA_HOME="/usr/lib/jvm/java-7-openjdk-amd64/jre")
library(devtools)
library(woe)
library(caret)
library(pROC)
library(smbinning)
library(reshape)
library(dplyr)
library(Causata)
Sys.setenv(JAVA_HOME="/usr/lib/jvm/java-7-openjdk-amd64/jre")
library(devtools)
load_all('/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/rJava')
library(rJava)
load_all('/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/RWekajars')
library(RWekajars)
installed.packages("RWekajars")
install.packages("RWekajars")
install.packages("RWekajars")
library(RWekajars)
library(devtools)
Sys.setenv(JAVA_HOME="/usr/lib/jvm/java-7-openjdk-amd64/jre")
load_all('/home/martakarass/R/x86_64-pc-linux-gnu-library/3.1/rJava')
library(rJava)
"RWekajars" %in% rownames(installed.packages())
library(RWekajars)
#' @description
#' Project configuration file.
#'
#' Contains:
#'  - setting of working directory (depenfing on user's comupter name)
#'  - loading all libraries used in the project
#'  - sourcing of all util scipts used in project
# ------------------------------------------------------------------------------
# Set working directory
computer.name <- Sys.info()["nodename"]
if (computer.name == "marta-komputer")
wd.tmp <- "/home/martakarass/my-store/studies/PW/project-scoring-data"
setwd(wd.tmp)
# ------------------------------------------------------------------------------
# Load libraries
library(corrgram)
library(ggplot2)
#' To load `woe` package:
#' 1. download woe-master.zip from https://github.com/tomasgreif/woe
#' 2. unzip it
#' 3. install from source:
#' install.packages("/home/martakarass/Downloads/woe-master", repos = NULL, type="source")
library(woe)
library(caret)
library(pROC)
library(smbinning)
library(reshape)
library(dplyr)
# to install under Ubuntu, follow: http://stackoverflow.com/questions/13403268/error-while-loading-rjava
library(rJava)
library(RWekajars)
library(RWeka)
library(FSelector)
# ------------------------------------------------------------------------------
# Source project util scripts
source("./R/UTILS_data_preprocessing.R")
oneR
random.forest.importance
