p <- ggplot(gcredit, aes(factor(RES), DURATION))
p + geom_boxplot()
p <- ggplot(gcredit, aes(factor(RES), DURATION))
p + geom_boxplot(aes(fill = factor(RES)))
ggplot(gcredit, aes(factor(RES), DURATION)) + geom_boxplot(aes(fill = factor(RES)))
ggplot(gcredit, aes(factor(RES), DURATION)) + geom_boxplot(aes(fill = factor(RES))) +
guides(color=guide_legend(title="RES"))
ggplot(gcredit, aes(factor(RES), DURATION)) + geom_boxplot(aes(fill = factor(RES))) +
guide_legend(title="my awesome title")
ggplot(gcredit, aes(factor(RES), DURATION)) + geom_boxplot(aes(fill = factor(RES))) +
scale_fill_manual("legend_title")
ggplot(gcredit, aes(factor(RES), DURATION)) + geom_boxplot(aes(fill = factor(RES))) +
scale_fill_discrete(name = "New Legend Title")
ggplot(gcredit, aes(factor(RES), DURATION)) + geom_boxplot(aes(fill = factor(RES))) +
scale_fill_discrete(name = "RES") + labs(title = "DURATION", x="", y="")
ggplot(gcredit, aes(factor(RES), DURATION)) + geom_boxplot(aes(fill = factor(RES))) +
scale_fill_discrete(name = "RES") + labs(title = "DURATION boxplot", x="RES", y="DURATION")
ggplot(gcredit, aes(factor(RES), AMOUNT)) + geom_boxplot(aes(fill = factor(RES))) +
scale_fill_discrete(name = "RES") + labs(title = "AMOUNT boxplot", x="RES", y="AMOUNT")
gcredit$AMOUNT_TO_DURATION <- gcredit$AMOUNT/gcredit$DURATION
summary(gcredit$AMOUNT_TO_DURATION)
plot(density(gcredit$AMOUNT_TO_DURATION)) # Interesting: very long tail!
boxplot(gcredit$AMOUNT_TO_DURATION)
boxplot(gcredit$AMOUNT_TO_DURATION)
ggplot(gcredit, aes(factor(RES), AMOUNT_TO_DURATION)) + geom_boxplot(aes(fill = factor(RES))) +
scale_fill_discrete(name = "RES") + labs(title = "AMOUNT_TO_DURATION boxplot", x="RES", y="AMOUNT_TO_DURATION")
ggplot(gcredit, aes(factor(RES), AMOUNT_TO_DURATION)) + geom_boxplot(aes(fill = factor(RES))) +
scale_fill_discrete(name = "RES") + labs(title = "AMOUNT_TO_DURATION boxplot", x="RES", y="AMOUNT_TO_DURATION") +
scale_y_continuous(limits=c(0, 500))
ggplot(gcredit, aes(factor(RES), DURATION)) + geom_boxplot(aes(fill = factor(RES))) +
scale_fill_discrete(name = "RES") + labs(title = "DURATION boxplot", x="RES", y="DURATION")
ggplot(gcredit, aes(factor(RES), AMOUNT)) + geom_boxplot(aes(fill = factor(RES))) +
scale_fill_discrete(name = "RES") + labs(title = "AMOUNT boxplot", x="RES", y="AMOUNT")
gcredit$DURATION_TO_AGE <- gcredit$DURATION/gcredit$AGE
gcredit$AMOUNT_TO_AGE <- gcredit$AMOUNT/gcredit$AGE
ggplot(gcredit, aes(factor(RES), DURATION_TO_AGE)) + geom_boxplot(aes(fill = factor(RES))) +
scale_fill_discrete(name = "RES") + labs(title = "DURATION_TO_AGE boxplot", x="RES", y="DURATION_TO_AGE")
ggplot(gcredit, aes(factor(RES), AMOUNT_TO_AGE)) + geom_boxplot(aes(fill = factor(RES))) +
scale_fill_discrete(name = "RES") + labs(title = "AMOUNT_TO_AGE boxplot", x="RES", y="AMOUNT_TO_AGE")
ggplot(gcredit, aes(factor(RES), DURATION_TO_AGE)) + geom_boxplot(aes(fill = factor(RES))) +
scale_fill_discrete(name = "RES") + labs(title = "DURATION_TO_AGE boxplot", x="RES", y="DURATION_TO_AGE")
ggplot(gcredit, aes(factor(AGE), DURATION)) + geom_boxplot(aes(fill = factor(RES))) +
scale_fill_discrete(name = "RES") + labs(title = "AGE boxplot", x="AGE", y="DURATION")
ggplot(gcredit, aes(factor(RES), AGE)) + geom_boxplot(aes(fill = factor(RES))) +
scale_fill_discrete(name = "RES") + labs(title = "AGE boxplot", x="AGE", y="DURATION")
table(gcredit$RES)
names(gcredit)
names(gcredit[, -c("AMOUNT_TO_DURATION")])
gcredit[, -c(24)]
names(gcredit[, -c(24)])
gcredit$AMOUNT_TO_DURATION <- gcredit$AMOUNT/gcredit$DURATION
gcredit$DURATION_TO_AGE <- gcredit$DURATION/gcredit$AGE
gcredit$AMOUNT_TO_AGE <- gcredit$AMOUNT/gcredit$AGE
names(gcredit)
names(gcredit)
gcredit <- gcredit[, -c(22)]
names(gcredit)
?smbinning.gen
?smbinning
var.to.cat.names <- c("DURATION", "AMOUNT", "AGE", "DURATION_TO_AGE", "AMOUNT_TO_AGE")
gcredit.quan <- gcredit[c(var.to.cat.names, "RES")]
# # Save subset of numeric variables
# write.table(x = gcredit.quan, file = "./data/german_quan.txt",
#             sep=",",  col.names=TRUE, row.names = FALSE)
# rm(gcredit.quan)
# gcredit.quan <- read.table("./data/german_quan.txt", sep=",", header =TRUE,
#                            colClasses=rep("numeric", 4))
# var.to.cat.names <- setdiff(names(gcredit.quan), "RES")
# Define min number of bins from smbinning package
#min.smbin.bins.num <- 4
# Categorize variables in 3 ways
for(var.name in var.to.cat.names){
print(var.name)
x <- gcredit.quan[, var.name]
y <- gcredit.quan[, "RES"]
# Categorize variable with optimal binning with conditional tree
# (smbinning package)
mincriterion.tmp = 0.95
binning.res <- smbinning.custom(df=gcredit.quan, y="RES", x=var.name,
mincriterion = mincriterion.tmp)
# Check if we got requested num of bins
while(binning.res == "No Bins"){#} || (length(binning.res$bands)-1) < min.smbin.bins.num){
mincriterion.tmp = mincriterion.tmp - 0.05
print(mincriterion.tmp)
binning.res <- smbinning.custom(df=gcredit.quan, y="RES", x=var.name,
mincriterion = mincriterion.tmp)
}
binned.var.name <- paste0(var.name, "_bin")
gcredit.quan <- smbinning.gen(gcredit.quan, binning.res, binned.var.name)
# Correct new variable to be a factor
binned.var.levels <- sort(unique(gcredit.quan[, binned.var.name]))
gcredit.quan[, binned.var.name] <- factor(gcredit.quan[, binned.var.name],
levels = binned.var.levels,
labels = binned.var.levels)
n.bins <- length(binning.res$bands)-1
# Categorize variable with simple tree model (rpart package)
rparted.var <- cutRpart(x, y)
gcredit.quan[, paste0(var.name, "_rpart")] <- rparted.var
n.rparts <- length(levels(rparted.var))
# Categorize variable with equal frequency discretization
# (for defined num of bins we got in 1. optimal binning and 2. rpart binning)
gcredit.quan[, paste0(var.name, "_equal1")] <- cutEqual(x, n.bins)
gcredit.quan[, paste0(var.name, "_equal2")] <- cutEqual(x, n.rparts)
}
iv.df <- iv.mult(gcredit.quan, "RES", TRUE)
iv.df
# Build data frame to compare information values
iv.comparision.df <- data.frame(var.name = numeric(0),
cat.sgn = numeric(0),
iv = numeric(0))
for(name in var.to.cat.names){
# optimal binning
idx.tmp <- which(iv.df[, "Variable"] == paste0(name, "_bin"))
iv.comparision.df[nrow(iv.comparision.df)+1, ] <-
c(name, "smbinning", iv.df[idx.tmp, "InformationValue"])
# rpart binning
idx.tmp <- which(iv.df[, "Variable"] == paste0(name, "_rpart"))
iv.comparision.df[nrow(iv.comparision.df)+1, ] <-
c(name, "rpart", iv.df[idx.tmp, "InformationValue"])
# best cat
idx.tmp <- which(grepl(paste0(name, "_equal"), iv.df[, "Variable"]))
iv.comparision.df[nrow(iv.comparision.df)+1, ] <-
c(name, "equal",  max(iv.df[idx.tmp, "InformationValue"]))
}
ggplot(iv.comparision.df, aes(var.name, iv, group = cat.sgn,
colour = cat.sgn)) + geom_line()
str(iv.comparision.df)
str(iv.comparision.df)
str(iv.comparision.df)
iv.comparision.df <- iv.comparision.df[ order(-iv.comparision.df[,3],), ]
iv.comparision.df <- iv.comparision.df[order(-iv.comparision.df[,3],), ]
iv.comparision.df[,3]
iv.comparision.df <- iv.comparision.df[order(-as.numeric(iv.comparision.df[,3]),), ]
var.to.cat.names <- c("AGE", "AMOUNT_TO_AGE", "AMOUNT", "DURATION", "DURATION_TO_AGE")
gcredit.quan <- gcredit[c(var.to.cat.names, "RES")]
iv.comparision.df$var.name <- factor(iv.comparision.df$var.name,levels = var.to.cat.names)
ggplot(iv.comparision.df, aes(var.name, iv, group = cat.sgn,
colour = cat.sgn)) + geom_line()
dput(iv.comparision.df, "./data/iv-comparision-df")
a <- dget("./data/iv-comparision-df")
a
library(smbinning)
n <- 1000
set.seed(1)
x <- rnorm(n)
y <- sample(c(1,0), n, replace = TRUE)
df <- data.frame(x,factor(y))
str(df)
?smbinning
library(smbinning) # Load package and its data
data(chileancredit) # Load smbinning sample dataset (Chilean Credit)
str(chileancredit) # Quick description of the data
table(chileancredit$FlagGB) # Tabulate target variable
chileancredit.train=subset(chileancredit,FlagSample==1)
chileancredit.test=subset(chileancredit,FlagSample==0)
result=smbinning(df=chileancredit.train,y="FlagGB",x="TOB",p=0.05) # Run and save result
result$ivtable # Tabulation and Information Value
var.to.cat.names <- c("AGE", "AMOUNT_TO_AGE", "AMOUNT", "DURATION", "DURATION_TO_AGE")
gcredit.quan <- gcredit[c(var.to.cat.names, "RES")]
# # Save subset of numeric variables
# write.table(x = gcredit.quan, file = "./data/german_quan.txt",
#             sep=",",  col.names=TRUE, row.names = FALSE)
# rm(gcredit.quan)
# gcredit.quan <- read.table("./data/german_quan.txt", sep=",", header =TRUE,
#                            colClasses=rep("numeric", 4))
# var.to.cat.names <- setdiff(names(gcredit.quan), "RES")
# Define min number of bins from smbinning package
#min.smbin.bins.num <- 4
# Categorize variables in 3 ways
for(var.name in var.to.cat.names){
print(var.name)
x <- gcredit.quan[, var.name]
y <- gcredit.quan[, "RES"]
# Categorize variable with optimal binning with conditional tree
# (smbinning package)
mincriterion.tmp = 0.95
binning.res <- smbinning.custom(df=gcredit.quan, y="RES", x=var.name,
mincriterion = mincriterion.tmp)
# Check if we got requested num of bins
while(binning.res == "No Bins"){#} || (length(binning.res$bands)-1) < min.smbin.bins.num){
mincriterion.tmp = mincriterion.tmp - 0.05
print(mincriterion.tmp)
binning.res <- smbinning.custom(df=gcredit.quan, y="RES", x=var.name,
mincriterion = mincriterion.tmp)
}
binned.var.name <- paste0(var.name, "_bin")
gcredit.quan <- smbinning.gen(gcredit.quan, binning.res, binned.var.name)
# Correct new variable to be a factor
binned.var.levels <- sort(unique(gcredit.quan[, binned.var.name]))
gcredit.quan[, binned.var.name] <- factor(gcredit.quan[, binned.var.name],
levels = binned.var.levels,
labels = binned.var.levels)
n.bins <- length(binning.res$bands)-1
# Categorize variable with simple tree model (rpart package)
rparted.var <- cutRpart(x, y)
gcredit.quan[, paste0(var.name, "_rpart")] <- rparted.var
n.rparts <- length(levels(rparted.var))
# Categorize variable with equal frequency discretization
# (for defined num of bins we got in 1. optimal binning and 2. rpart binning)
gcredit.quan[, paste0(var.name, "_equal1")] <- cutEqual(x, n.bins)
gcredit.quan[, paste0(var.name, "_equal2")] <- cutEqual(x, n.rparts)
}
iv.df <- iv.mult(gcredit.quan, "RES", TRUE)
?iv.mult
library(woe)
iv.mult(german_data,"gb")
iv.mult.res <- iv.mult(german_data,"gb")
iv.mult.res <- iv.mult(german_data,"gb", verbose=TRUE)
iv.mult.res <- iv.mult(german_data,"gb", verbose=FALSE)
iv.mult.res
iv.mult.re[[2]]
iv.mult.res[[2]]
ggplot(iv.comparision.df, aes(var.name, iv, group = cat.sgn, colour = cat.sgn)) +
geom_line() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(iv.comparision.df, aes(var.name, iv, group = cat.sgn, colour = cat.sgn)) +
geom_line() + theme(axis.text.x = element_text(angle = 10, hjust = 1))
names(gcredit)
gcredit$AMOUNT_TO_DURATION <- gcredit$AMOUNT/gcredit$DURATION
names(gcredit)
var.to.cat.names <- c("AGE", "AMOUNT_TO_AGE", "AMOUNT", "DURATION", "DURATION_TO_AGE", "AMOUNT_TO_DURATION")
gcredit.quan <- gcredit[c(var.to.cat.names, "RES")]
for(var.name in var.to.cat.names){
print(var.name)
x <- gcredit.quan[, var.name]
y <- gcredit.quan[, "RES"]
# Categorize variable with optimal binning with conditional tree
# (smbinning package)
mincriterion.tmp = 0.95
binning.res <- smbinning.custom(df=gcredit.quan, y="RES", x=var.name,
mincriterion = mincriterion.tmp)
# Check if we got requested num of bins
while(binning.res == "No Bins"){#} || (length(binning.res$bands)-1) < min.smbin.bins.num){
mincriterion.tmp = mincriterion.tmp - 0.05
print(mincriterion.tmp)
binning.res <- smbinning.custom(df=gcredit.quan, y="RES", x=var.name,
mincriterion = mincriterion.tmp)
}
binned.var.name <- paste0(var.name, "_bin")
gcredit.quan <- smbinning.gen(gcredit.quan, binning.res, binned.var.name)
# Correct new variable to be a factor
binned.var.levels <- sort(unique(gcredit.quan[, binned.var.name]))
gcredit.quan[, binned.var.name] <- factor(gcredit.quan[, binned.var.name],
levels = binned.var.levels,
labels = binned.var.levels)
n.bins <- length(binning.res$bands)-1
# Categorize variable with simple tree model (rpart package)
rparted.var <- cutRpart(x, y)
gcredit.quan[, paste0(var.name, "_rpart")] <- rparted.var
n.rparts <- length(levels(rparted.var))
# Categorize variable with equal frequency discretization
# (for defined num of bins we got in 1. optimal binning and 2. rpart binning)
gcredit.quan[, paste0(var.name, "_equal1")] <- cutEqual(x, n.bins)
gcredit.quan[, paste0(var.name, "_equal2")] <- cutEqual(x, n.rparts)
}
# # Compare information value of those
# # download woe-master.zip from https://github.com/tomasgreif/woe and unzip it;
# # the install from source:
# #install.packages("/home/martakarass/Downloads/woe-master", repos = NULL, type="source")
# library(woe)
iv.df <- iv.mult(gcredit.quan, "RES", TRUE)
iv.df
# Build data frame to compare information values
iv.comparision.df <- data.frame(var.name = numeric(0),
cat.sgn = numeric(0),
iv = numeric(0))
for(name in var.to.cat.names){
# optimal binning
idx.tmp <- which(iv.df[, "Variable"] == paste0(name, "_bin"))
iv.comparision.df[nrow(iv.comparision.df)+1, ] <-
c(name, "smbinning", iv.df[idx.tmp, "InformationValue"])
# rpart binning
idx.tmp <- which(iv.df[, "Variable"] == paste0(name, "_rpart"))
iv.comparision.df[nrow(iv.comparision.df)+1, ] <-
c(name, "rpart", iv.df[idx.tmp, "InformationValue"])
# best cat
idx.tmp <- which(grepl(paste0(name, "_equal"), iv.df[, "Variable"]))
iv.comparision.df[nrow(iv.comparision.df)+1, ] <-
c(name, "equal",  max(iv.df[idx.tmp, "InformationValue"]))
}
# Plot comparision
iv.comparision.df$var.name <- factor(iv.comparision.df$var.name,levels = var.to.cat.names)
dput(iv.comparision.df, "./data/iv-comparision-df")
rm(iv.comparision.df)
iv.comparision.df <- dget("./data/iv-comparision-df")
ggplot(iv.comparision.df, aes(var.name, iv, group = cat.sgn, colour = cat.sgn)) +
geom_line() + theme(axis.text.x = element_text(angle = 10, hjust = 1))
var.to.cat.names <- c("AGE", "AMOUNT_TO_DURATION", "AMOUNT_TO_AGE", "AMOUNT", "DURATION", "DURATION_TO_AGE")
gcredit.quan <- gcredit[c(var.to.cat.names, "RES")]
# Categorize variables in 3 ways
for(var.name in var.to.cat.names){
print(var.name)
x <- gcredit.quan[, var.name]
y <- gcredit.quan[, "RES"]
# Categorize variable with optimal binning with conditional tree
# (smbinning package)
mincriterion.tmp = 0.95
binning.res <- smbinning.custom(df=gcredit.quan, y="RES", x=var.name,
mincriterion = mincriterion.tmp)
# Check if we got requested num of bins
while(binning.res == "No Bins"){#} || (length(binning.res$bands)-1) < min.smbin.bins.num){
mincriterion.tmp = mincriterion.tmp - 0.05
print(mincriterion.tmp)
binning.res <- smbinning.custom(df=gcredit.quan, y="RES", x=var.name,
mincriterion = mincriterion.tmp)
}
binned.var.name <- paste0(var.name, "_bin")
gcredit.quan <- smbinning.gen(gcredit.quan, binning.res, binned.var.name)
# Correct new variable to be a factor
binned.var.levels <- sort(unique(gcredit.quan[, binned.var.name]))
gcredit.quan[, binned.var.name] <- factor(gcredit.quan[, binned.var.name],
levels = binned.var.levels,
labels = binned.var.levels)
n.bins <- length(binning.res$bands)-1
# Categorize variable with simple tree model (rpart package)
rparted.var <- cutRpart(x, y)
gcredit.quan[, paste0(var.name, "_rpart")] <- rparted.var
n.rparts <- length(levels(rparted.var))
# Categorize variable with equal frequency discretization
# (for defined num of bins we got in 1. optimal binning and 2. rpart binning)
gcredit.quan[, paste0(var.name, "_equal1")] <- cutEqual(x, n.bins)
gcredit.quan[, paste0(var.name, "_equal2")] <- cutEqual(x, n.rparts)
}
# # Compare information value of those
# # download woe-master.zip from https://github.com/tomasgreif/woe and unzip it;
# # the install from source:
# #install.packages("/home/martakarass/Downloads/woe-master", repos = NULL, type="source")
# library(woe)
iv.df <- iv.mult(gcredit.quan, "RES", TRUE)
iv.df
# Build data frame to compare information values
iv.comparision.df <- data.frame(var.name = numeric(0),
cat.sgn = numeric(0),
iv = numeric(0))
for(name in var.to.cat.names){
# optimal binning
idx.tmp <- which(iv.df[, "Variable"] == paste0(name, "_bin"))
iv.comparision.df[nrow(iv.comparision.df)+1, ] <-
c(name, "smbinning", iv.df[idx.tmp, "InformationValue"])
# rpart binning
idx.tmp <- which(iv.df[, "Variable"] == paste0(name, "_rpart"))
iv.comparision.df[nrow(iv.comparision.df)+1, ] <-
c(name, "rpart", iv.df[idx.tmp, "InformationValue"])
# best cat
idx.tmp <- which(grepl(paste0(name, "_equal"), iv.df[, "Variable"]))
iv.comparision.df[nrow(iv.comparision.df)+1, ] <-
c(name, "equal",  max(iv.df[idx.tmp, "InformationValue"]))
}
# Plot comparision
iv.comparision.df$var.name <- factor(iv.comparision.df$var.name,levels = var.to.cat.names)
dput(iv.comparision.df, "./data/iv-comparision-df")
rm(iv.comparision.df)
iv.comparision.df <- dget("./data/iv-comparision-df")
ggplot(iv.comparision.df, aes(var.name, iv, group = cat.sgn, colour = cat.sgn)) +
geom_line() + theme(axis.text.x = element_text(angle = 10, hjust = 1))
var.to.cat.names <- c("AGE", "AMOUNT_TO_AGE", "AMOUNT_TO_DURATION","AMOUNT", "DURATION", "DURATION_TO_AGE")
gcredit.quan <- gcredit[c(var.to.cat.names, "RES")]
# # Save subset of numeric variables
# write.table(x = gcredit.quan, file = "./data/german_quan.txt",
#             sep=",",  col.names=TRUE, row.names = FALSE)
# rm(gcredit.quan)
# gcredit.quan <- read.table("./data/german_quan.txt", sep=",", header =TRUE,
#                            colClasses=rep("numeric", 4))
# var.to.cat.names <- setdiff(names(gcredit.quan), "RES")
# Define min number of bins from smbinning package
#min.smbin.bins.num <- 4
# Categorize variables in 3 ways
for(var.name in var.to.cat.names){
print(var.name)
x <- gcredit.quan[, var.name]
y <- gcredit.quan[, "RES"]
# Categorize variable with optimal binning with conditional tree
# (smbinning package)
mincriterion.tmp = 0.95
binning.res <- smbinning.custom(df=gcredit.quan, y="RES", x=var.name,
mincriterion = mincriterion.tmp)
# Check if we got requested num of bins
while(binning.res == "No Bins"){#} || (length(binning.res$bands)-1) < min.smbin.bins.num){
mincriterion.tmp = mincriterion.tmp - 0.05
print(mincriterion.tmp)
binning.res <- smbinning.custom(df=gcredit.quan, y="RES", x=var.name,
mincriterion = mincriterion.tmp)
}
binned.var.name <- paste0(var.name, "_bin")
gcredit.quan <- smbinning.gen(gcredit.quan, binning.res, binned.var.name)
# Correct new variable to be a factor
binned.var.levels <- sort(unique(gcredit.quan[, binned.var.name]))
gcredit.quan[, binned.var.name] <- factor(gcredit.quan[, binned.var.name],
levels = binned.var.levels,
labels = binned.var.levels)
n.bins <- length(binning.res$bands)-1
# Categorize variable with simple tree model (rpart package)
rparted.var <- cutRpart(x, y)
gcredit.quan[, paste0(var.name, "_rpart")] <- rparted.var
n.rparts <- length(levels(rparted.var))
# Categorize variable with equal frequency discretization
# (for defined num of bins we got in 1. optimal binning and 2. rpart binning)
gcredit.quan[, paste0(var.name, "_equal1")] <- cutEqual(x, n.bins)
gcredit.quan[, paste0(var.name, "_equal2")] <- cutEqual(x, n.rparts)
}
# # Compare information value of those
# # download woe-master.zip from https://github.com/tomasgreif/woe and unzip it;
# # the install from source:
# #install.packages("/home/martakarass/Downloads/woe-master", repos = NULL, type="source")
# library(woe)
iv.df <- iv.mult(gcredit.quan, "RES", TRUE)
iv.df
# Build data frame to compare information values
iv.comparision.df <- data.frame(var.name = numeric(0),
cat.sgn = numeric(0),
iv = numeric(0))
for(name in var.to.cat.names){
# optimal binning
idx.tmp <- which(iv.df[, "Variable"] == paste0(name, "_bin"))
iv.comparision.df[nrow(iv.comparision.df)+1, ] <-
c(name, "smbinning", iv.df[idx.tmp, "InformationValue"])
# rpart binning
idx.tmp <- which(iv.df[, "Variable"] == paste0(name, "_rpart"))
iv.comparision.df[nrow(iv.comparision.df)+1, ] <-
c(name, "rpart", iv.df[idx.tmp, "InformationValue"])
# best cat
idx.tmp <- which(grepl(paste0(name, "_equal"), iv.df[, "Variable"]))
iv.comparision.df[nrow(iv.comparision.df)+1, ] <-
c(name, "equal",  max(iv.df[idx.tmp, "InformationValue"]))
}
# Plot comparision
iv.comparision.df$var.name <- factor(iv.comparision.df$var.name,levels = var.to.cat.names)
dput(iv.comparision.df, "./data/iv-comparision-df")
rm(iv.comparision.df)
iv.comparision.df <- dget("./data/iv-comparision-df")
ggplot(iv.comparision.df, aes(var.name, iv, group = cat.sgn, colour = cat.sgn)) +
geom_line() + theme(axis.text.x = element_text(angle = 10, hjust = 1))
?smbinning
iv.comparision.df$var.name
iv.comparision.df
gcredit.quan
names(gcredit.quan)
x.tmp <- gcredit$RATE_TO_DISP_INCOME
(res.df.tmp <- infval.comb.levels.effect(y, x.tmp))
# Hopeless variable :P
gcredit.cat$RATE_TO_DISP_INCOME <- x.tmp
x.tmp <- gcredit$RATE_TO_DISP_INCOME
(res.df.tmp <- infval.comb.levels.effect(y, x.tmp))
# Hopeless variable :P
gcredit.cat$RATE_TO_DISP_INCOME <- x.tmp
gcredit.cat <- data.frame(RES = gcredit.quan$RES,
DURATION = gcredit.quan$DURATION_bin,
AGE = gcredit.quan$AGE_bin,
AMOUNT = gcredit.quan$AMOUNT_bin,
AMOUNT_TO_DURATION = gcredit.quan$AMOUNT_TO_DURATION_bin)
#' -----------------------------------------
#' Joining levels of categorical variables if reasonable.
#'
#' The point is that maybe some levels of categorical variables
#' are very similar in terms of rate of bad clients AND they are
#' reasonalby similar in terms of their meaning (e.g. for PURPOSE variable
#' its levels: "car (new)" and "car (old)"). Maybe
#' it is worth to "join" levels of these variables
#' in order to reduce "mess" in data.
y <- gcredit$RES
# ---------------
# gcredit$PURPOSE
x.tmp <- gcredit$PURPOSE
(res.df.tmp <- infval.comb.levels.effect(y, x.tmp, mosaic.plot = FALSE))
# interesting: note how much
# 25           car (new)          car (used) 0.08741
# lowe the information value!
x.tmp <- combine.factor.lvls(x.tmp, c(res.df.tmp[2,1], res.df.tmp[2,2]))
(res.df.tmp <- infval.comb.levels.effect(y, x.tmp))
gcredit.cat$PURPOSE <- x.tmp
# ---------------
# gcredit$RATE_TO_DISP_INCOME
x.tmp <- gcredit$RATE_TO_DISP_INCOME
(res.df.tmp <- infval.comb.levels.effect(y, x.tmp))
# Hopeless variable :P
gcredit.cat$RATE_TO_DISP_INCOME <- x.tmp
# ---------------
# gcredit$RESIDENCE
x.tmp <- gcredit$RESIDENCE
(res.df.tmp <- infval.comb.levels.effect(y, x.tmp))
# Hopeless variable :P
gcredit.cat$RESIDENCE <- x.tmp
?iv.plot.woe
names(gcredit.quan)
iv.plot.woe(iv.mult(gcredit.quan, "RES",
vars=c("AGE_equal1", "AGE_equal2", "AGE_bin"),
summary=FALSE))
iv.plot.woe(iv.mult(gcredit.quan, "RES",
vars=c("AGE_equal1", "AGE_bin"),
summary=FALSE))
iv.plot.woe(iv.mult(gcredit.quan, "RES",
vars=c("AGE_equal1", "AGE_bin"),
summary=TRUE))
iv.plot.woe(iv.mult(gcredit.quan, "RES",
vars=c("AGE_equal1", "AGE_bin"),
summary=FALSE))
ggplot(iv.comparision.df, aes(var.name, iv, group = cat.sgn, colour = cat.sgn)) +
geom_line() + theme(axis.text.x = element_text(angle = 10, hjust = 1))
iv.plot.woe(iv.mult(gcredit.quan, "RES",
vars=c("AMOUNT_equal1", "AMOUNT_bin"),
summary=FALSE))
iv.plot.woe(iv.mult(gcredit.quan, "RES",
vars=c("AMOUNT_equal1", "AMOUNT_bin", "AMOUNT_equal2"),
summary=FALSE))
?iv.num
iv.num(gcredit.quan, "RES", "AGE_equal1", verbose = FALSE, rcontrol = NULL)
iv.num(gcredit.quan, "RES", "AGE_equal2", verbose = FALSE, rcontrol = NULL)
names(gcredit.quan)
iv.num(gcredit.quan, "RES", "AGE_equal2", verbose = FALSE, rcontrol = NULL)
gcredit.quan$RES
iv.num(gcredit.quan, "RES", vars=c("AGE_equal1", "AGE_bin"), verbose = FALSE, rcontrol = NULL)
iv.num(gcredit.quan, "RES", "AGE_equal2", verbose = FALSE)
iv.num(gcredit.quan, "RES", "AGE_equal2")
