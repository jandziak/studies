col.sgns <- c("V1", "V3", "V4", "V6", "V7", "V9", "V10", "V12", "V14", "V15",
"V17", "V19", "V20")
# Recode columns
for(col.sgn in col.sgns){
gcredit.cpy[, col.sgn] <- sapply(gcredit.cpy[, col.sgn],
function(val) gcredit.recode.values(col.sgn, as.character(val))
message(paste0("Column: ", col.sgn, " recoded."))
}
# Make copy of the dataset
gcredit.cpy <- gcredit
# Define columns which are to be recoded
col.sgns <- c("V1", "V3", "V4", "V6", "V7", "V9", "V10", "V12", "V14", "V15",
"V17", "V19", "V20")
# Recode columns
for(col.sgn in col.sgns){
gcredit.cpy[, col.sgn] <- sapply(gcredit.cpy[, col.sgn],
function(val) gcredit.recode.values(col.sgn, as.character(val)))
message(paste0("Column: ", col.sgn, " recoded."))
}
str(gcredit.cpy)
#' @author
#' Marta Karaś, Jan Idziak
#'
#' @description
#' The script performs preprocessing of German Credit dataset, downloaded from
#' http://archive.ics.uci.edu/ml/datasets/Statlog+(German+Credit+Data)
# Define tmp working direcotry based on computer name
computer.name <- Sys.info()["nodename"]
if (computer.name == "marta-komputer")
wd.tmp <- "/home/martakarass/my-store/studies/PW/project-scoring-data"
setwd(wd.tmp)
# Read raw data
gcredit <- read.table("./data/german_data.txt")
# Dataset overview
str(gcredit)
head(gcredit)
#' -----------------------------------------------------------------------------
#' Substitute value signatures with their human-readable values.
#'
#' @param col.sgn - signature of dataset column (from raw dataset)
#' @param val - value to be substituted
#'
gcredit.recode.values <- function(col.sgn, val){
# Status of existing checking account
if(col.sgn == "V1"){
switch(val,
"A11"="<0 DM",
"A12"="0-200 DM",
"A13"=">=200 DM",
"A14"="no checking account",
val)
# Credit history
} else if(col.sgn == "V3"){
switch(val,
"A30"="no credits taken/ all credits paid back duly",
"A31"="all credits at this bank paid back duly",
"A32"="existing credits paid back duly till now",
"A33"="delay in paying off in the past",
"A34"="critical account/ other credits existing (not at this bank)",
val)
# Purpose
} else if(col.sgn == "V4"){
switch(val,
"A40"="car (new)",
"A41"="car (used)",
"A42"="furniture/equipment",
"A43"="radio/television",
"A44"="domestic appliances",
"A45"="repairs",
"A46"="education",
"A47"="(vacation - does not exist?)",
"A48"="retraining",
"A49"="business",
"A410"="others",
val)
# Savings account/bonds
} else if(col.sgn == "V6"){
switch(val,
"A61"="<100 DM",
"A62"="100-500 DM",
"A63"="500-1000 DM",
"A64"=">=1000 DM",
"A65"="unknown/ no savings account",
val)
# Present employment since
} else if(col.sgn == "V7"){
switch(val,
"A71"="unemployed",
"A72"="<1 year",
"A73"="1-4 years",
"A74"="4-7 years",
"A75"=">= 7 years",
val)
# Personal status and sex
} else if(col.sgn == "V9"){
switch(val,
"A91"="male : divorced/separated",
"A92"="female : divorced/separated/married",
"A93"="male : single",
"A94"="male : married/widowed",
"A95"="female : single",
val)
# Other debtors / guarantors
} else if(col.sgn == "V10"){
switch(val,
"A101"="none",
"A102"="co-applicant",
"A103"="guarantor",
val)
# Property
} else if(col.sgn == "V12"){
switch(val,
"A121"="real estate",
"A122"="building society savings agreement/ life insurance",
"A123"="car or other, not in Savings",
"A124"="unknown / no property",
val)
# Other installment plans
} else if(col.sgn == "V14"){
switch(val,
"A141"="bank",
"A142"="stores",
"A143"="none",
val)
# Housing
} else if(col.sgn == "V15"){
switch(val,
"A151"="rent",
"A152"="own",
"A153"="for free",
val)
# Job
} else if(col.sgn == "V17"){
switch(val,
"A171"="unemployed/ unskilled - non-resident",
"A172"="unskilled - resident",
"A173"="skilled employee / official",
"A174"="management/ self-employed/ highly qualified employee/ officer",
val)
# Telephone
} else if(col.sgn == "V19"){
switch(val,
"A191"="none",
"A192"="yes, registered under the customers name ",
val)
# foreign worke
} else if(col.sgn == "V20"){
switch(val,
"A201"="yes",
"A202"="no",
val)
} else{
stop("Undefined column name.")
}
}
# Make copy of the dataset
gcredit.cpy <- gcredit
# Define columns which are to be recoded
col.sgns <- c("V1", "V3", "V4", "V6", "V7", "V9", "V10", "V12", "V14", "V15",
"V17", "V19", "V20")
# Recode columns
for(col.sgn in col.sgns){
col.tmp <- sapply(gcredit.cpy[, col.sgn],
function(val) gcredit.recode.values(col.sgn, as.character(val)))
gcredit.cpy[, col.sgn] <- as.factor(col.tmp)
message(paste0("Column: ", col.sgn, " recoded."))
}
str(gcredit.cpy)
?sum
setdiff(names(gcredit.cpy), col.sgns)
#' @author
#' Marta Karaś, Jan Idziak
#'
#' @description
#' The script performs preprocessing of German Credit dataset, downloaded from
#' http://archive.ics.uci.edu/ml/datasets/Statlog+(German+Credit+Data)
# Define tmp working direcotry based on computer name
computer.name <- Sys.info()["nodename"]
if (computer.name == "marta-komputer")
wd.tmp <- "/home/martakarass/my-store/studies/PW/project-scoring-data"
setwd(wd.tmp)
# Read raw data
gcredit <- read.table("./data/german_data.txt")
# Dataset overview
str(gcredit)
head(gcredit)
#' -----------------------------------------------------------------------------
#' Substitute value signatures with their human-readable values.
#'
#' @param col.sgn - signature of dataset column (from raw dataset)
#' @param val - value to be substituted
#'
gcredit.recode.values <- function(col.sgn, val){
# Status of existing checking account
if(col.sgn == "V1"){
switch(val,
"A11"="<0 DM",
"A12"="0-200 DM",
"A13"=">=200 DM",
"A14"="no checking account",
val)
# Credit history
} else if(col.sgn == "V3"){
switch(val,
"A30"="no credits taken/ all credits paid back duly",
"A31"="all credits at this bank paid back duly",
"A32"="existing credits paid back duly till now",
"A33"="delay in paying off in the past",
"A34"="critical account/ other credits existing (not at this bank)",
val)
# Purpose
} else if(col.sgn == "V4"){
switch(val,
"A40"="car (new)",
"A41"="car (used)",
"A42"="furniture/equipment",
"A43"="radio/television",
"A44"="domestic appliances",
"A45"="repairs",
"A46"="education",
"A47"="(vacation - does not exist?)",
"A48"="retraining",
"A49"="business",
"A410"="others",
val)
# Savings account/bonds
} else if(col.sgn == "V6"){
switch(val,
"A61"="<100 DM",
"A62"="100-500 DM",
"A63"="500-1000 DM",
"A64"=">=1000 DM",
"A65"="unknown/ no savings account",
val)
# Present employment since
} else if(col.sgn == "V7"){
switch(val,
"A71"="unemployed",
"A72"="<1 year",
"A73"="1-4 years",
"A74"="4-7 years",
"A75"=">= 7 years",
val)
# Personal status and sex
} else if(col.sgn == "V9"){
switch(val,
"A91"="male : divorced/separated",
"A92"="female : divorced/separated/married",
"A93"="male : single",
"A94"="male : married/widowed",
"A95"="female : single",
val)
# Other debtors / guarantors
} else if(col.sgn == "V10"){
switch(val,
"A101"="none",
"A102"="co-applicant",
"A103"="guarantor",
val)
# Property
} else if(col.sgn == "V12"){
switch(val,
"A121"="real estate",
"A122"="building society savings agreement/ life insurance",
"A123"="car or other, not in Savings",
"A124"="unknown / no property",
val)
# Other installment plans
} else if(col.sgn == "V14"){
switch(val,
"A141"="bank",
"A142"="stores",
"A143"="none",
val)
# Housing
} else if(col.sgn == "V15"){
switch(val,
"A151"="rent",
"A152"="own",
"A153"="for free",
val)
# Job
} else if(col.sgn == "V17"){
switch(val,
"A171"="unemployed/ unskilled - non-resident",
"A172"="unskilled - resident",
"A173"="skilled employee / official",
"A174"="management/ self-employed/ highly qualified employee/ officer",
val)
# Telephone
} else if(col.sgn == "V19"){
switch(val,
"A191"="none",
"A192"="yes, registered under the customers name ",
val)
# foreign worke
} else if(col.sgn == "V20"){
switch(val,
"A201"="yes",
"A202"="no",
val)
} else{
stop("Undefined column name.")
}
}
# Make copy of the dataset
gcredit.cpy <- gcredit
# Define columns which are to be recoded
col.sgns <- c("V1", "V3", "V4", "V6", "V7", "V9", "V10", "V12", "V14", "V15",
"V17", "V19", "V20")
# Recode columns
for(col.sgn in col.sgns){
col.tmp <- sapply(gcredit.cpy[, col.sgn],
function(val) gcredit.recode.values(col.sgn, as.character(val)))
gcredit.cpy[, col.sgn] <- as.factor(col.tmp)
message(paste0("Column: ", col.sgn, " recoded."))
}
# Convert from integer to numeric
num.col.sgns <- c("V2", "V5", "V8", "V11", "V13", "V16", "V18")
for(col.sgn in num.col.sgns){
gcredit.cpy[, col.sgn] <- as.numeric(gcredit.cpy[, col.sgn])
message(paste0("Column: ", col.sgn, " converted to numeric."))
}
str(gcredit.cpy)
summary(gcredit.cpy[,"V21"])
table(gcredit.cpy[,"V21"])
gcredit.cpy[,"V21"]
response.tmp <- sapply(gcredit.cpy[,"V21"], function(val) val-1)
response.tmp
table(response.tmp)
response.tmp <- as.factor(sapply(gcredit.cpy[,"V21"], function(val) val-1))
response.tmp
gcredit.cpy[,"V21"] <- response.tmp
str(gcredit.cpy)
response.tmp <- factor(response.tmp, levels = c("0", "1"), labels = c("0", "1"))
response.tmp
str(gcredit.cpy)
gcredit.cpy[,"V21"] <- response.tmp
str(gcredit.cpy)
#' @author
#' Marta Karaś, Jan Idziak
#'
#' @description
#' The script performs preprocessing of German Credit dataset, downloaded from
#' http://archive.ics.uci.edu/ml/datasets/Statlog+(German+Credit+Data)
# Define tmp working direcotry based on computer name
computer.name <- Sys.info()["nodename"]
if (computer.name == "marta-komputer")
wd.tmp <- "/home/martakarass/my-store/studies/PW/project-scoring-data"
setwd(wd.tmp)
# Read raw data
gcredit <- read.table("./data/german_data.txt")
# Dataset overview
str(gcredit)
head(gcredit)
#' -----------------------------------------------------------------------------
#' Substitute value signatures with their human-readable values.
#'
#' @param col.sgn - signature of dataset column (from raw dataset)
#' @param val - value to be substituted
#'
gcredit.recode.values <- function(col.sgn, val){
# Status of existing checking account
if(col.sgn == "V1"){
switch(val,
"A11"="<0 DM",
"A12"="0-200 DM",
"A13"=">=200 DM",
"A14"="no checking account",
val)
# Credit history
} else if(col.sgn == "V3"){
switch(val,
"A30"="no credits taken/ all credits paid back duly",
"A31"="all credits at this bank paid back duly",
"A32"="existing credits paid back duly till now",
"A33"="delay in paying off in the past",
"A34"="critical account/ other credits existing (not at this bank)",
val)
# Purpose
} else if(col.sgn == "V4"){
switch(val,
"A40"="car (new)",
"A41"="car (used)",
"A42"="furniture/equipment",
"A43"="radio/television",
"A44"="domestic appliances",
"A45"="repairs",
"A46"="education",
"A47"="(vacation - does not exist?)",
"A48"="retraining",
"A49"="business",
"A410"="others",
val)
# Savings account/bonds
} else if(col.sgn == "V6"){
switch(val,
"A61"="<100 DM",
"A62"="100-500 DM",
"A63"="500-1000 DM",
"A64"=">=1000 DM",
"A65"="unknown/ no savings account",
val)
# Present employment since
} else if(col.sgn == "V7"){
switch(val,
"A71"="unemployed",
"A72"="<1 year",
"A73"="1-4 years",
"A74"="4-7 years",
"A75"=">= 7 years",
val)
# Personal status and sex
} else if(col.sgn == "V9"){
switch(val,
"A91"="male : divorced/separated",
"A92"="female : divorced/separated/married",
"A93"="male : single",
"A94"="male : married/widowed",
"A95"="female : single",
val)
# Other debtors / guarantors
} else if(col.sgn == "V10"){
switch(val,
"A101"="none",
"A102"="co-applicant",
"A103"="guarantor",
val)
# Property
} else if(col.sgn == "V12"){
switch(val,
"A121"="real estate",
"A122"="building society savings agreement/ life insurance",
"A123"="car or other, not in Savings",
"A124"="unknown / no property",
val)
# Other installment plans
} else if(col.sgn == "V14"){
switch(val,
"A141"="bank",
"A142"="stores",
"A143"="none",
val)
# Housing
} else if(col.sgn == "V15"){
switch(val,
"A151"="rent",
"A152"="own",
"A153"="for free",
val)
# Job
} else if(col.sgn == "V17"){
switch(val,
"A171"="unemployed/ unskilled - non-resident",
"A172"="unskilled - resident",
"A173"="skilled employee / official",
"A174"="management/ self-employed/ highly qualified employee/ officer",
val)
# Telephone
} else if(col.sgn == "V19"){
switch(val,
"A191"="none",
"A192"="yes, registered under the customers name ",
val)
# foreign worke
} else if(col.sgn == "V20"){
switch(val,
"A201"="yes",
"A202"="no",
val)
} else{
stop("Undefined column name.")
}
}
# Make copy of the dataset
gcredit.cpy <- gcredit
# Define columns which are to be recoded
col.sgns <- c("V1", "V3", "V4", "V6", "V7", "V9", "V10", "V12", "V14", "V15",
"V17", "V19", "V20")
# Recode columns
for(col.sgn in col.sgns){
col.tmp <- sapply(gcredit.cpy[, col.sgn],
function(val) gcredit.recode.values(col.sgn, as.character(val)))
gcredit.cpy[, col.sgn] <- as.factor(col.tmp)
message(paste0("Column: ", col.sgn, " values recoded."))
}
# Convert from integer to numeric
num.col.sgns <- c("V2", "V5", "V8", "V11", "V13", "V16", "V18")
for(col.sgn in num.col.sgns){
gcredit.cpy[, col.sgn] <- as.numeric(gcredit.cpy[, col.sgn])
message(paste0("Column: ", col.sgn, " converted to numeric."))
}
#' Response variable coding convention
#'
#' In our anlysis, we follow the convention from:
#' "An Introduction to Statistical Learning with Applications in R" by
#' Gareth James, Daniela Witten, Trevor Hastie, Robert Tibshirani
#'
#' according to which we model probability of client's default.
#'
#' This means that we recode the response variable to have value:
#'  - 1 for default ("bad") client
#'  - 0 for non-default ("good") client
response.tmp <- sapply(gcredit.cpy[,"V21"], function(val) val-1)
response.tmp <- factor(response.tmp, levels = c("0", "1"), labels = c("0", "1"))
gcredit.cpy[,"V21"] <- response.tmp
str(gcredit.cpy)
head(gcredit.cpy)
table(gcredit.cpy$21)
table(gcredit.cpy[, "V21"])
gcredit.tmp.1 <- gcredit.cpy
gcredit <- gcredit.cpy
